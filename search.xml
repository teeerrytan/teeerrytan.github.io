<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构知识点集合 1.0]]></title>
    <url>%2F2018%2F08%2F16%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9F%A5%E8%AF%86%E7%82%B9%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[这是Github上一个2000多star的开源学习项目仓库, 集合了各种面试或实际操作中所需的基础知识. 私以为非常有用, 故保存下来以备后续查阅所用. Java面试通关手册（Java学习指南）github 地址：https://github.com/Snailclimb/Java_Guide 如果你觉得有什么问题可以在上面提issue，觉得不错的话你也可以star一下。 数据结构推荐学习视频：浙江大学数据结构国家精品教程 Queue Java集合类分析之Queue Set 由浅入深理解java集合(二)——集合 Set List Java 集合系列08之 List总结(LinkedList, ArrayList等使用场景和性能分析) ArrayList 是一个数组队列，相当于动态数组。它由数组实现，随机访问效率高，随机插入、随机删除效率低。 LinkedList 是一个双向链表。它也可以被当作堆栈、队列或双端队列进行操作。LinkedList随机访问效率低，但随机插入、随机删除效率高。 Vector 是矢量队列，和ArrayList一样，它也是一个动态数组，由数组实现。但是ArrayList是非线程安全的，而Vector是线程安全的。 Stack 是栈，它继承于Vector。它的特性是：先进后出(FILO, First In Last Out)。 集合框架源码学习之ArrayList 注意ArrayList的扩容机制(注意移位运算符的使用)以及System.arraycopy()和Arrays.copyOf()方法在ArrayList集合源码中的使用。 集合框架源码学习之LinkedList java数据结构与算法之顺序表与链表深入分析 Map 集合框架源码学习之HashMap(JDK1.8) ConcurrentHashMap实现原理及源码分析 Stack(栈) java数据结构与算法之栈（Stack）设计与实现 树 1 二叉树 二叉树（百度百科） (1)完全二叉树——若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。 (2)满二叉树——除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。 (3)平衡二叉树——平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。 2 完全二叉树 完全二叉树（百度百科） 完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树 3 满二叉树 满二叉树（百度百科，国内外的定义不同） 国内教程定义：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为K，且结点总数是(2^k) -1 ，则它就是满二叉树。 堆 数据结构之堆的定义 堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆 4 二叉查找树（BST） 浅谈算法和数据结构: 七 二叉查找树 二叉查找树的特点： 若任意节点的左子树不空，则左子树上所有结点的 值均小于它的根结点的值； 若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 任意节点的左、右子树也分别为二叉查找树。 没有键值相等的节点（no duplicate nodes）。 5 平衡二叉树（Self-balancing binary search tree） 平衡二叉树（百度百科，平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等） 6 红黑树 红黑树特点: 每个节点不是红色就是黑色的； 根节点总是黑色的； 所有的叶节点都是是黑色的（红黑树的叶子节点都是空节点（NIL或者NULL））； 如果节点是红色的，则它的子节点必须是黑色的（反之不一定）； 从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度） 漫画：什么是红黑树？（也介绍到了二叉查找树） 寻找红黑树的操作手册（文章排版以及思路真的不错） 红黑树深入剖析及Java实现（美团点评技术团队） 7 B-，B+，B*树 二叉树学习笔记之B树、B+树、B*树 《B-树，B+树，B*树详解》 《B-树，B+树与B*树的优缺点比较》 B-树（或B树）是一种平衡的多路查找(又称排序)树，在文件系统中有所应用。主要用作文件的索引。其中的B就表示平衡(Balance) B+ 树的叶子节点链表结构相比于 B- 树便于扫库，和范围检索。 B+树支持range-query(区间查询)非常方便，而B树不支持。这是数据库选用B+树的最主要原因。 B树 是B+树的变体，B树分配新结点的概率比B+树要低，空间使用率更高； 8 LSM 树 [HBase] LSM树 VS B+树 B+树最大的性能问题是会产生大量的随机IO 为了克服B+树的弱点，HBase引入了LSM树的概念，即Log-Structured Merge-Trees。 LSM树由来、设计思想以及应用到HBase的索引]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writinghhh nihaoma heiheihei test colume line 1 line 2 test row 123 123 test row 2 121 121 Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
